%%-*- mode: erlang -*-

%% ==============================================================================
%% maybe upload coverdata
%% ==============================================================================

CONFIG1 = case os:getenv("TRAVIS") of
              "true" ->
                  JobId = os:getenv("TRAVIS_JOB_ID"),
                  [{coveralls_service_job_id, JobId},
                   {coveralls_coverdata, "_build/test/cover/*.coverdata"},
                   {coveralls_service_name , "travis-ci"} | CONFIG];
              _ ->
                  CONFIG
          end,

%% ==============================================================================
%% Dependencies
%% ==============================================================================

Kf = fun(K, L) -> case lists:keyfind(K, 1, L) of
                    false -> [];
                    {K, V} -> V
                  end
     end,

%% TODO: this is only a temporary workaround in order to be backward compatible
%% The right way is to always pin dependency version in rebar.config
%% Any dependency that can not be tested and released independently
%% (i.e. has to be a part of a emqx release in order to be tested)
%% should not be a dependency but a local application reside in the same repo.
%% (Meaning: emqx should be an umbrella project)
DefaultDepRef =
    case os:getenv("EMQX_DEPS_DEFAULT_VSN") of
        false -> {branch, "develop"}; %% not set
        "" -> {branch, "develop"}; %% set empty
        MaybeTag ->
            case re:run(MaybeTag, "v\[0-9\]+\.\[0-9\]+\.*") of
                nomatch -> {branch, MaybeTag};
                _ -> {tag, MaybeTag}
            end
    end,

%% Make a dep element for rebar.config GitRef should be either {tag, Tag} or {branch, Branch}
MakeDep =
    fun(App) ->
        {AppName, GitRef} =
            case App of
                {Name, Pinned} when is_tuple(Pinned) -> {Name, Pinned};
                {Name, Tag} when is_list(Tag) -> {Name, {tag, Tag}};
                Name when is_atom(Name) -> {Name, DefaultDepRef}
           end,
        RepoName = string:join(string:tokens(atom_to_list(AppName), "_"), "-"),
        URL = "https://github.com/emqx/" ++ RepoName,
        {AppName, {git, URL, GitRef}}
    end,

TranslateDeps =
    fun(C) ->
        case Kf(emqx_deps, C) of
          false -> C;
          DepApps ->
            EmqxDeps = lists:map(MakeDep, DepApps),
            ExistingDeps = Kf(deps, C),
            lists:keyreplace(emqx_deps, 1, C, {deps, ExistingDeps ++ EmqxDeps})
        end
    end,

%% Translate top level emqx_deps (in default profile)
CONFIG2 = TranslateDeps(CONFIG1),
%% Translate extra deps from other profiles as well
UpdatedProfiles = lists:map(
  fun ({PName, PConfig}) -> {PName, TranslateDeps(PConfig)} end,
  Kf(profiles, CONFIG2)),
CONFIG3 = lists:keyreplace(profiles, 1, CONFIG2, {profiles, UpdatedProfiles}),

FilePath = case os:type() of
               {win32, nt} ->
                   "emqx.rebar.config";
               _ ->
                   "/tmp/emqx.rebar.config"
           end,

file:write_file(FilePath, [io_lib:format("~p.\n", [I]) || I <- CONFIG3]),

CONFIG3.

